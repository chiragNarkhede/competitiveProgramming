Given two strings S1 and S2 in lowercase, the task is to make them anagram. The only allowed operation is to remove a character from any string. Find the minimum number of characters to be deleted to make both the strings anagram. Two strings are called anagram of each other if one of them can be converted into another by rearranging its letters.

Input Format:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of 2 strings to make the anagrams.

Output Format:
For each test case, in a new line, output the minimum number of characters to be deleted to make both the strings anagram.

Your Task:
Complete the function remAnagram() which takes two strings S1, S2 as input parameter, and returns minimum characters needs to be deleted.

Expected Time Complexity: O(max(|S1|, |S2|)), where |S| = length of string S.
Expected Auxiliary Space: O(26)

Constraints:
1 <= T <= 100
1 <= |S1|, |S2| <= 105

Example:
Input:
2
bcadeh
hea
cddgk
gcd
Output:
3
2

-----------------------------------------------------------------------
Code :

	public int remAnagrams(String s,String s1)
        {
            int count1[] = new int[26];
            int count2[]= new int[26];
            
            int count =0;
            
           for(int i=0;i<s.length();i++)
           {
                char c = s.charAt(i);
                count1[c-'a']++;
           }
            
            for(int i=0;i<s1.length();i++)
           {
                char c = s1.charAt(i);
                count2[c-'a']++;
           }
           
           for(int i=0;i<26;i++)
           {
               count+= Math.abs(count1[i]-count2[i]);
           }
            
            return count;
        }
