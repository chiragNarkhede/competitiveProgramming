Given an array of integers. Check whether it contains a triplet that sums up to zero. 

Input:
The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains an integer N, denoting the number of elements in array. The second line of each test case contains N space separated values of the array.

Output:
For each test case, output will be 1 if triplet exists else 0.

Your Task:
You don't need to read input or print anything. Your task is to complete the boolean function findTriplets() which takes the array arr[] and the size of the array (n) as inputs and returns True if the given array has a triplet with zero sum and False otherwise. 

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(1)

Constrains:
1 <= T <= 100
1 <= N <= 104
-106 <= Ai <= 106

Example:
Input:
2
5
0 -1 2 -3 1
3
1 2 3
Output:
1
0

Explanation:
Testcase 1: 0, -1 and 1 forms a triplet with sum equal to 0.
Testcase 2: No triplet exists which sum to 0.

--------------------------------------------------------------

Code:

	public boolean findTriplets(int arr[] , int n)
    {
        int keySum =0;
        boolean index= false;
      Arrays.sort(arr,0,n-1);  
      for(int i=0;i<n-2;i++)
      {
          int left = i+1;
          int right = n-1;
          int x= arr[i];
     
          while (left< right)
          {
             
              if(x+arr[left]+arr[right] == 0)
              {
                  index=true;
                  
              }
              else if(x +arr[left]+arr[right] <0) left++;
              else right--;
          }
      }
         return index;
    }
